apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: mistral-7b-llm
spec:
  serviceUnhealthySecondThreshold: 1200 # Config for the health check threshold for service. Default value is 60.
  deploymentUnhealthySecondThreshold: 1200 # Config for the health check threshold for deployments. Default value is 60.
  serveConfigV2: |
    applications:
    - name: router
      import_path: rayllm.backend:router_application
      route_prefix: /
      args:
        models:
          - ./models/mistralai--mistral-7B-Instruct-v02.yaml
  rayClusterConfig:
    # Ray head pod template
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
        block: 'true'
        num-cpus: "0"
        # resources: '"{\"accelerator_type_cpu\": 2}"'
      # pod template
      template:
        spec:
          containers:
          - name: ray-head
            image: anyscale/ray-llm:0.5.0
            resources:
              limits:
                cpu: 1
                memory: 2Gi
              requests:
                cpu: 500m
                memory: 1Gi
            volumeMounts:
            - mountPath: /home/ray/models
              name: model
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265 # Ray dashboard
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
          volumes:
          - name: model
            configMap:
              name: falcon-7b-instruct
              items:
              - key: mistralai--mistral-7B-Instruct-v02.yaml
                path: mistralai--mistral-7B-Instruct-v02.yaml
    workerGroupSpecs:
    # the pod replicas in this group typed worker
    - replicas: 1
      minReplicas: 0
      maxReplicas: 1
      # logical group name, for this called small-group, also can be functional
      groupName: gpu-group
      rayStartParams:
        block: 'true'
#        resources: '"{\"accelerator_type_cpu\": 20, \"accelerator_type_l4\": 1}"'
      # pod template
      template:
        spec:
          runtimeClassName: nvidia # select the runtime class for GPU
          containers:
          - name: llm
            image: anyscale/ray-llm:0.5.0
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh","-c","ray stop"]
            resources:
              limits:
                cpu: "4"
                memory: "8G"
                nvidia.com/gpu: 1
              requests:
                cpu: "4"
                memory: "8G"
                nvidia.com/gpu: 1
            ports:
            - containerPort: 8000
              name: serve
          # Please add the following taints to the GPU node.
          tolerations:
          - key: "onelbock.ai/node-type"
            operator: "Equal"
            value: "gpu-worker"
            effect: "NoSchedule"
#          nodeSelector:
#            cloud.google.com/gke-accelerator: nvidia-l4
