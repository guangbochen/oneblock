/*
Copyright 2024 1block.ai.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/v2/pkg/apply"
	"github.com/rancher/wrangler/v2/pkg/condition"
	"github.com/rancher/wrangler/v2/pkg/generic"
	"github.com/rancher/wrangler/v2/pkg/kv"
	v1 "github.com/ray-project/kuberay/ray-operator/apis/ray/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// RayClusterController interface for managing RayCluster resources.
type RayClusterController interface {
	generic.ControllerInterface[*v1.RayCluster, *v1.RayClusterList]
}

// RayClusterClient interface for managing RayCluster resources in Kubernetes.
type RayClusterClient interface {
	generic.ClientInterface[*v1.RayCluster, *v1.RayClusterList]
}

// RayClusterCache interface for retrieving RayCluster resources in memory.
type RayClusterCache interface {
	generic.CacheInterface[*v1.RayCluster]
}

type RayClusterStatusHandler func(obj *v1.RayCluster, status v1.RayClusterStatus) (v1.RayClusterStatus, error)

type RayClusterGeneratingHandler func(obj *v1.RayCluster, status v1.RayClusterStatus) ([]runtime.Object, v1.RayClusterStatus, error)

func RegisterRayClusterStatusHandler(ctx context.Context, controller RayClusterController, condition condition.Cond, name string, handler RayClusterStatusHandler) {
	statusHandler := &rayClusterStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterRayClusterGeneratingHandler(ctx context.Context, controller RayClusterController, apply apply.Apply,
	condition condition.Cond, name string, handler RayClusterGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &rayClusterGeneratingHandler{
		RayClusterGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterRayClusterStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type rayClusterStatusHandler struct {
	client    RayClusterClient
	condition condition.Cond
	handler   RayClusterStatusHandler
}

func (a *rayClusterStatusHandler) sync(key string, obj *v1.RayCluster) (*v1.RayCluster, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type rayClusterGeneratingHandler struct {
	RayClusterGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *rayClusterGeneratingHandler) Remove(key string, obj *v1.RayCluster) (*v1.RayCluster, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.RayCluster{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *rayClusterGeneratingHandler) Handle(obj *v1.RayCluster, status v1.RayClusterStatus) (v1.RayClusterStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.RayClusterGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
